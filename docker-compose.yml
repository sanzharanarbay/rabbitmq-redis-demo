version: "3.7"
services:
  php:
    build:
      context: ./
      dockerfile: sourcefiles/php-fpm/Dockerfile
    image: laravel-image
    container_name: testapp-php
    restart: unless-stopped
    working_dir: /var/www/html/testApp
    volumes:
      - ./:/var/www/html/testApp
      - ./docker/php/local.ini:/usr/local/etc/php/conf.d/local.ini
    networks:
      - app-network

  db:
      image: postgres:10.1
      container_name: testapp-db
      restart: unless-stopped
      tty: true
      ports:
        - "5432:5432"
      environment:
        POSTGRES_DB: ${DB_DATABASE}
        POSTGRES_USER: ${DB_USERNAME}
        POSTGRES_PASSWORD: ${DB_PASSWORD}
        SERVICE_TAGS: dev
        SERVICE_NAME: postgres
      volumes:
        - dbdata:/var/lib/postgresql/data
        - ./sourcefiles/postgres/postgresql.conf:/usr/share/postgresql/postgresql.conf
      networks:
        - app-network

  nginx:
    image: nginx:alpine
    container_name: testapp-nginx
    restart: unless-stopped
    ports:
      - 8000:80
    volumes:
      - ./:/var/www/html/testApp
      - ./sourcefiles/nginx/:/etc/nginx/conf.d/
    networks:
      - app-network

  rabbitmq:
    image: rabbitmq
    container_name: testapp-rabbitmq
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_LOGIN}
      RABBITMQ_DEFAULT_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - "./tests/files/rootCA.pem:/rootCA.pem:ro"
      - "./tests/files/rootCA.key:/rootCA.key:ro"
    ports:
      - 5671:5671
      - 5672:5672
    networks:
      - app-network

  rabbitmq-management:
    image: rabbitmq:management
    container_name: testapp-rabbitmq-management
    restart: always
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_LOGIN}
      RABBITMQ_DEFAULT_PASSWORD: ${RABBITMQ_PASSWORD}
      RABBITMQ_DEFAULT_VHOST: /
    volumes:
      - "./tests/files/rootCA.pem:/rootCA.pem:ro"
      - "./tests/files/rootCA.key:/rootCA.key:ro"
    ports:
      - 15671:15671
      - 15672:15672
    networks:
        - app-network

  redis:
    image: redis:4.0
    container_name: testapp_redis
    restart: always
    ports:
      - "6382:6379"
    networks:
      - app-network

  redis-commander:
    container_name: testapp-redis-commander
    image: rediscommander/redis-commander:latest
    restart: always
    environment:
      - REDIS_HOSTS=local:redis:6379
    ports:
      - "8081:8081"
    networks:
      - app-network

networks:
  app-network:
    driver: bridge

volumes:
  dbdata:
    driver: local
